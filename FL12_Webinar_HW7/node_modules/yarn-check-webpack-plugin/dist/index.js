'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var child_process = require('child_process');
var chalk = _interopDefault(require('chalk'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var log = {
    success: function (message) { return console.log(chalk.green(message)); },
    warn: function (message) { return console.log(chalk.yellow(message)); },
    error: function (message) { return console.log(chalk.red(message)); }
};

var _this = null;
var PACKAGE_NOT_INSTALLED = /\"(.*)\" not installed/;
var PACKAGE_WRONG_VERSION = /\"(.*)\" is wrong version: expected \"(.*)\", got \"(.*)\"/;
var shouldPreventWarning = function (pkg, exclude) {
    if (!exclude) {
        return false;
    }
    return exclude.test(pkg);
};
var runCheckVerifyTree = function (_a) {
    var rootDirectory = _a.rootDirectory, exclude = _a.exclude;
    return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_b) {
            return [2 /*return*/, new Promise(function (resolve) {
                    var packagesNotInstalled = [];
                    var packagesWrongVersion = [];
                    var yarnCheckVerifyTree = child_process.spawn("yarn", ["check", "--verify-tree"], {
                        cwd: rootDirectory,
                        env: process.env
                    });
                    yarnCheckVerifyTree.stderr.on("data", function (data) {
                        var err = data.toString();
                        var packageNotInstalled = err.match(PACKAGE_NOT_INSTALLED);
                        if (packageNotInstalled) {
                            var name_1 = packageNotInstalled[1];
                            if (shouldPreventWarning(name_1, exclude))
                                return;
                            packagesNotInstalled.push({ name: name_1 });
                        }
                        var packageWrongVersion = err.match(PACKAGE_WRONG_VERSION);
                        if (packageWrongVersion) {
                            var name_2 = packageWrongVersion[1], expected = packageWrongVersion[2], got = packageWrongVersion[3];
                            if (shouldPreventWarning(name_2, exclude))
                                return;
                            packagesWrongVersion.push({ name: name_2, version: { expected: expected, got: got } });
                        }
                    });
                    yarnCheckVerifyTree.on("exit", function () {
                        resolve({ packagesNotInstalled: packagesNotInstalled, packagesWrongVersion: packagesWrongVersion });
                    });
                })];
        });
    });
};
/**
 * Run the yarn check command, parse any missing or incorrect packages, log
 * the issues and any other helpful prompts.
 *
 * @param options an object to configure how the yarn check is ran
 *
 * @returns a promise that resolves to a boolean. `true` if the method ran
 * successfully with no issues. `false` if there was one more missing or
 * incorrect packages.
 */
var run = function (options) {
    if (options === void 0) { options = {}; }
    return __awaiter(_this, void 0, void 0, function () {
        var _a, packagesNotInstalled, packagesWrongVersion;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, runCheckVerifyTree(options)];
                case 1:
                    _a = _b.sent(), packagesNotInstalled = _a.packagesNotInstalled, packagesWrongVersion = _a.packagesWrongVersion;
                    if (!packagesNotInstalled.length && !packagesWrongVersion.length) {
                        log.success("All packages installed and up to date.");
                        return [2 /*return*/, true];
                    }
                    if (packagesNotInstalled.length) {
                        log.warn("Missing packages:");
                        packagesNotInstalled.map(function (pkg) { return log.warn("  - " + pkg.name); });
                    }
                    if (packagesWrongVersion.length) {
                        log.warn("Wrong packages:");
                        packagesWrongVersion.map(function (pkg) {
                            return log.warn("  - " + pkg.name + " (expected " + pkg.version.expected + " but got " + pkg.version.got + ")");
                        });
                    }
                    log.error("Please run " + chalk.bold("`yarn install --check-files`") + " to update.");
                    return [2 /*return*/, false];
            }
        });
    });
};

var YarnCheck = /** @class */ (function () {
    function YarnCheck(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.apply = function (compiler) {
            compiler.hooks.run.tapAsync("YarnCheck", _this.perform);
            compiler.hooks.watchRun.tapAsync("YarnCheck", _this.perform);
        };
        this.perform = function (_compiler, callback) { return __awaiter(_this, void 0, void 0, function () {
            var successful;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run(this.options)];
                    case 1:
                        successful = _a.sent();
                        if (!successful && this.options.forceKill) {
                            callback("Restart webpack after resolving the above issues.");
                        }
                        else {
                            callback();
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        this.options = options;
    }
    return YarnCheck;
}());

exports.YarnCheck = YarnCheck;
